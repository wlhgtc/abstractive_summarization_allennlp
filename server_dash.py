"""
A `Dash <https://plot.ly/products/dash/>`_ server for serving predictions
from a single AllenNLP model. It also includes a very, very bare-bones
web front-end for exploring predictions (or you can provide your own).

For example, if you have your own predictor and model in the `my_stuff` package,
and you want to use the default HTML, you could run this like

```
python -m allennlp.service.server_dash \
    --archive-path /path/to/trained/model/archive.tar.gz \
    --predictor my-predictor-name \
    --title "Demo of My Stuff" \
    --field-name question --field-name passage --field-name hint \
    --user "admin" \
    --password "AllenNLP" \
    --include-package my_stuff
```
"""
from typing import List, Callable
import argparse
import json
import logging
import os
from string import Template
import sys

from flask import jsonify

import dash
import dash_auth
from dash.dependencies import Input, Output
import dash_core_components as dcc
import dash_html_components as html
import plotly.graph_objs as go

introduction = '''
- [Kaggle toxic classification competition](https://www.kaggle.com/c/jigsaw-toxic-comment-classification-challenge) using [AllenNLP](https://github.com/allenai/allennlp)
- This demo is generated by [Dash](https://plot.ly/products/dash/).
- The label probabilities can update just time.
'''


from allennlp.common import JsonDict
from allennlp.common.util import import_submodules
from allennlp.models.archival import load_archive
from allennlp.service.predictors import Predictor
from allennlp.service.server_flask import ServerError

logger = logging.getLogger(__name__)  # pylint: disable=invalid-name


def make_app(predictor: Predictor,
             field_names: List[str] = None,
             title: str = "AllenNLP Demo",
             user: str = 'admin',
             password: str = 'AllenNLP') -> dash.Dash:
    """
    Creates a Flask app that serves up the provided ``Predictor``
    along with a front-end for interacting with it.

    If you want to use the built-in bare-bones HTML, you must provide the
    field names for the inputs (which will be used both as labels
    and as the keys in the JSON that gets sent to the predictor).

    If you would rather create your own HTML, call it index.html
    and provide its directory as ``static_dir``. In that case you
    don't need to supply the field names -- that information should
    be implicit in your demo site. (Probably the easiest thing to do
    is just start with the bare-bones HTML and modify it.)

    In addition, if you want somehow transform the JSON prediction
    (e.g. by removing probabilities or logits)
    you can do that by passing in a ``sanitizer`` function.
    """
    
    app = dash.Dash('AllenNLP Demo')
    app.config.supress_callback_exceptions = True
    
    VALID_USERNAME_PASSWORD_PAIRS = [[user or 'admin', password or 'AllenNLP']]
    auth = dash_auth.BasicAuth(
        app,
        VALID_USERNAME_PASSWORD_PAIRS
    )

    app.layout = html.Div(children=[html.Div(style={'width': '50%','float':'left','margin-top':15},children=[
    html.H3(style={'margin-top':15},children=title or 'Toxic Comments Classifier'),
    dcc.Markdown(children=introduction),
    html.Span('Enter text or'),
    dcc.Dropdown(
        id = 'selection',
        options=[
            {'label': "Yo bitch Ja Rule is more succesful then you'll ever be whats up with you and ...", 'value': "Yo bitch Ja Rule is more succesful then you'll ever be whats up with you and hating you sad mofuckas...i should bitch slap ur pethedic white faces and get you to kiss my ass you guys sicken me. Ja rule is about pride in da music man. dont diss that shit on him. and nothin is wrong bein like tupac he was a brother too...fuckin white boys get things right next time."},
            {'label': 'Dear god this site is horrible.', 'value': 'Dear god this site is horrible.'},
            {'label': "I think its crap that the link to roggenbier is to this article. Somebody that...", 'value': "I think its crap that the link to roggenbier is to this article. Somebody that knows how to do things should change it."},
            {'label': "knock it off you bloody CWI trot", 'value': "knock it off you bloody CWI trot"},
        ],
        placeholder = 'Choose an exapmle...'
    ),
    html.H6('comment_text'),
    dcc.Textarea(style={'width': '100%','height':150},id='comment_text', placeholder='E.g. "Dear god this site is horrible."'),
    ]),
    html.Div(style={'width': '50%','float':'right','margin-top':30},children=[dcc.Graph(id='multi_toxic_label'),]),
    ])
    
    
   
    #update comment_text
    @app.callback(Output(component_id='comment_text', component_property='value'),[Input(component_id='selection', component_property='value')])
    def update_comment_text(selection):
        return selection
        
    #updata graph
    @app.callback(Output(component_id='multi_toxic_label', component_property='figure'),[Input(component_id='comment_text', component_property='value')])
    def update_graph(comment_text):
        
        if len(comment_text) == 0:
            return None
        data = {"comment_text":comment_text}

        prediction = predictor.predict_json(data)

        log_blob = {"inputs": data, "outputs": prediction}
        logger.info("prediction: %s", json.dumps(log_blob))
        
        return {
            'data': [
                go.Bar(
                    x=[key for key in prediction.keys()],
                    y=[value for value in prediction.values()]
                    )
                ],
            'layout':
            go.Layout(
                        title='Multi Toxic Label',
                        xaxis = {'title': 'label'},
                        yaxis =  {'title': 'probability'},
                        )
            }
    return app


def main(args):
    # Executing this file with no extra options runs the simple service with the bidaf test fixture
    # and the machine-comprehension predictor. There's no good reason you'd want
    # to do this, except possibly to test changes to the stock HTML).

    parser = argparse.ArgumentParser(description='Serve up a simple model')

    parser.add_argument('--archive-path', type=str, help='path to trained archive file')
    parser.add_argument('--predictor', type=str, help='name of predictor')
    parser.add_argument('--title', type=str, help='change the default page title', default="AllenNLP Demo")
    parser.add_argument('--field-name', type=str, action='append', help='field names to include in the demo')
    parser.add_argument('--user', type=str, help='demo app user name', default="admin")
    parser.add_argument('--password', type=str, help='demo app user password', default="AllenNLP")
    parser.add_argument('--port', type=int, default=8000, help='port to serve the demo on')

    parser.add_argument('--include-package',
                        type=str,
                        action='append',
                        default=[],
                        help='additional packages to include')

    args = parser.parse_args(args)

    # Load modules
    for package_name in args.include_package:
        import_submodules(package_name)

    archive = load_archive(args.archive_path or 'tmp/model.tar.gz')
    predictor = Predictor.from_archive(archive, args.predictor or 'toxic-comments-classifier')
    field_names = args.field_name or ['comment_text']
    
    app = make_app(predictor=predictor,
                   field_names=field_names,
                   title=args.title,
                   user=args.user,
                   password=args.password)
                   
    app.css.append_css({'external_url': 'https://codepen.io/chriddyp/pen/bWLwgP.css'})
    #app.css.append_css({'external_url': 'static_html/demo.css'})
    print(f"Model loaded, serving demo on port {args.port}")
    app.run_server(port=args.port, debug=True)

#
# HTML and Templates for the default bare-bones app are below
#


if __name__ == "__main__":
    main(sys.argv[1:])
